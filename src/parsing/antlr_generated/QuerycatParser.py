# Generated from grammars/Querycat.g4 by ANTLR 4.11.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys

if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,
        1,
        71,
        433,
        2,
        0,
        7,
        0,
        2,
        1,
        7,
        1,
        2,
        2,
        7,
        2,
        2,
        3,
        7,
        3,
        2,
        4,
        7,
        4,
        2,
        5,
        7,
        5,
        2,
        6,
        7,
        6,
        2,
        7,
        7,
        7,
        2,
        8,
        7,
        8,
        2,
        9,
        7,
        9,
        2,
        10,
        7,
        10,
        2,
        11,
        7,
        11,
        2,
        12,
        7,
        12,
        2,
        13,
        7,
        13,
        2,
        14,
        7,
        14,
        2,
        15,
        7,
        15,
        2,
        16,
        7,
        16,
        2,
        17,
        7,
        17,
        2,
        18,
        7,
        18,
        2,
        19,
        7,
        19,
        2,
        20,
        7,
        20,
        2,
        21,
        7,
        21,
        2,
        22,
        7,
        22,
        2,
        23,
        7,
        23,
        2,
        24,
        7,
        24,
        2,
        25,
        7,
        25,
        2,
        26,
        7,
        26,
        2,
        27,
        7,
        27,
        2,
        28,
        7,
        28,
        2,
        29,
        7,
        29,
        2,
        30,
        7,
        30,
        2,
        31,
        7,
        31,
        2,
        32,
        7,
        32,
        2,
        33,
        7,
        33,
        2,
        34,
        7,
        34,
        2,
        35,
        7,
        35,
        2,
        36,
        7,
        36,
        2,
        37,
        7,
        37,
        2,
        38,
        7,
        38,
        2,
        39,
        7,
        39,
        2,
        40,
        7,
        40,
        2,
        41,
        7,
        41,
        2,
        42,
        7,
        42,
        2,
        43,
        7,
        43,
        2,
        44,
        7,
        44,
        2,
        45,
        7,
        45,
        2,
        46,
        7,
        46,
        2,
        47,
        7,
        47,
        2,
        48,
        7,
        48,
        2,
        49,
        7,
        49,
        2,
        50,
        7,
        50,
        2,
        51,
        7,
        51,
        2,
        52,
        7,
        52,
        2,
        53,
        7,
        53,
        2,
        54,
        7,
        54,
        2,
        55,
        7,
        55,
        2,
        56,
        7,
        56,
        2,
        57,
        7,
        57,
        2,
        58,
        7,
        58,
        2,
        59,
        7,
        59,
        2,
        60,
        7,
        60,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        1,
        1,
        1,
        3,
        1,
        128,
        8,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        2,
        1,
        2,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        4,
        1,
        4,
        3,
        4,
        140,
        8,
        4,
        1,
        4,
        1,
        4,
        1,
        5,
        1,
        5,
        1,
        5,
        1,
        6,
        3,
        6,
        148,
        8,
        6,
        1,
        6,
        1,
        6,
        1,
        7,
        3,
        7,
        153,
        8,
        7,
        1,
        7,
        3,
        7,
        156,
        8,
        7,
        1,
        8,
        1,
        8,
        3,
        8,
        160,
        8,
        8,
        1,
        8,
        1,
        8,
        3,
        8,
        164,
        8,
        8,
        3,
        8,
        166,
        8,
        8,
        1,
        9,
        1,
        9,
        1,
        9,
        4,
        9,
        171,
        8,
        9,
        11,
        9,
        12,
        9,
        172,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        3,
        10,
        179,
        8,
        10,
        3,
        10,
        181,
        8,
        10,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        12,
        1,
        12,
        1,
        12,
        1,
        13,
        1,
        13,
        1,
        13,
        3,
        13,
        192,
        8,
        13,
        1,
        13,
        1,
        13,
        3,
        13,
        196,
        8,
        13,
        1,
        13,
        3,
        13,
        199,
        8,
        13,
        1,
        13,
        3,
        13,
        202,
        8,
        13,
        5,
        13,
        204,
        8,
        13,
        10,
        13,
        12,
        13,
        207,
        9,
        13,
        3,
        13,
        209,
        8,
        13,
        1,
        13,
        1,
        13,
        1,
        14,
        1,
        14,
        1,
        14,
        3,
        14,
        216,
        8,
        14,
        3,
        14,
        218,
        8,
        14,
        1,
        15,
        1,
        15,
        1,
        15,
        3,
        15,
        223,
        8,
        15,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        17,
        1,
        17,
        1,
        17,
        5,
        17,
        231,
        8,
        17,
        10,
        17,
        12,
        17,
        234,
        9,
        17,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        19,
        1,
        19,
        1,
        19,
        5,
        19,
        242,
        8,
        19,
        10,
        19,
        12,
        19,
        245,
        9,
        19,
        1,
        19,
        1,
        19,
        1,
        20,
        1,
        20,
        1,
        20,
        3,
        20,
        252,
        8,
        20,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        22,
        1,
        22,
        1,
        23,
        1,
        23,
        1,
        23,
        3,
        23,
        262,
        8,
        23,
        3,
        23,
        264,
        8,
        23,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        3,
        25,
        275,
        8,
        25,
        5,
        25,
        277,
        8,
        25,
        10,
        25,
        12,
        25,
        280,
        9,
        25,
        1,
        26,
        3,
        26,
        283,
        8,
        26,
        1,
        27,
        1,
        27,
        1,
        27,
        5,
        27,
        288,
        8,
        27,
        10,
        27,
        12,
        27,
        291,
        9,
        27,
        1,
        28,
        1,
        28,
        1,
        29,
        1,
        29,
        1,
        30,
        1,
        30,
        1,
        31,
        1,
        31,
        1,
        31,
        5,
        31,
        302,
        8,
        31,
        10,
        31,
        12,
        31,
        305,
        9,
        31,
        1,
        32,
        1,
        32,
        1,
        32,
        5,
        32,
        310,
        8,
        32,
        10,
        32,
        12,
        32,
        313,
        9,
        32,
        1,
        33,
        1,
        33,
        3,
        33,
        317,
        8,
        33,
        1,
        34,
        1,
        34,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        3,
        35,
        326,
        8,
        35,
        1,
        36,
        1,
        36,
        3,
        36,
        330,
        8,
        36,
        1,
        37,
        1,
        37,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        39,
        1,
        39,
        1,
        39,
        3,
        39,
        340,
        8,
        39,
        1,
        40,
        1,
        40,
        1,
        40,
        3,
        40,
        345,
        8,
        40,
        1,
        41,
        1,
        41,
        1,
        42,
        1,
        42,
        1,
        42,
        1,
        42,
        1,
        42,
        3,
        42,
        354,
        8,
        42,
        1,
        43,
        1,
        43,
        1,
        43,
        3,
        43,
        359,
        8,
        43,
        1,
        43,
        1,
        43,
        1,
        43,
        1,
        44,
        1,
        44,
        1,
        45,
        1,
        45,
        1,
        46,
        1,
        46,
        1,
        47,
        1,
        47,
        1,
        47,
        5,
        47,
        373,
        8,
        47,
        10,
        47,
        12,
        47,
        376,
        9,
        47,
        1,
        48,
        1,
        48,
        1,
        48,
        5,
        48,
        381,
        8,
        48,
        10,
        48,
        12,
        48,
        384,
        9,
        48,
        1,
        49,
        1,
        49,
        1,
        50,
        1,
        50,
        1,
        50,
        1,
        50,
        1,
        50,
        1,
        50,
        1,
        50,
        1,
        50,
        1,
        50,
        1,
        50,
        1,
        50,
        1,
        50,
        1,
        50,
        3,
        50,
        401,
        8,
        50,
        1,
        51,
        1,
        51,
        1,
        52,
        1,
        52,
        1,
        52,
        1,
        52,
        1,
        52,
        3,
        52,
        410,
        8,
        52,
        1,
        53,
        1,
        53,
        1,
        53,
        1,
        53,
        1,
        54,
        1,
        54,
        1,
        54,
        3,
        54,
        419,
        8,
        54,
        1,
        55,
        1,
        55,
        1,
        56,
        1,
        56,
        1,
        57,
        1,
        57,
        1,
        58,
        1,
        58,
        1,
        59,
        1,
        59,
        1,
        60,
        1,
        60,
        1,
        60,
        0,
        0,
        61,
        0,
        2,
        4,
        6,
        8,
        10,
        12,
        14,
        16,
        18,
        20,
        22,
        24,
        26,
        28,
        30,
        32,
        34,
        36,
        38,
        40,
        42,
        44,
        46,
        48,
        50,
        52,
        54,
        56,
        58,
        60,
        62,
        64,
        66,
        68,
        70,
        72,
        74,
        76,
        78,
        80,
        82,
        84,
        86,
        88,
        90,
        92,
        94,
        96,
        98,
        100,
        102,
        104,
        106,
        108,
        110,
        112,
        114,
        116,
        118,
        120,
        0,
        11,
        1,
        0,
        8,
        9,
        1,
        0,
        14,
        15,
        1,
        0,
        22,
        24,
        1,
        0,
        48,
        49,
        1,
        0,
        30,
        34,
        1,
        0,
        50,
        52,
        1,
        0,
        53,
        55,
        1,
        0,
        56,
        58,
        1,
        0,
        43,
        44,
        1,
        0,
        60,
        61,
        2,
        0,
        47,
        47,
        66,
        66,
        429,
        0,
        122,
        1,
        0,
        0,
        0,
        2,
        125,
        1,
        0,
        0,
        0,
        4,
        132,
        1,
        0,
        0,
        0,
        6,
        134,
        1,
        0,
        0,
        0,
        8,
        137,
        1,
        0,
        0,
        0,
        10,
        143,
        1,
        0,
        0,
        0,
        12,
        147,
        1,
        0,
        0,
        0,
        14,
        152,
        1,
        0,
        0,
        0,
        16,
        165,
        1,
        0,
        0,
        0,
        18,
        167,
        1,
        0,
        0,
        0,
        20,
        180,
        1,
        0,
        0,
        0,
        22,
        182,
        1,
        0,
        0,
        0,
        24,
        185,
        1,
        0,
        0,
        0,
        26,
        188,
        1,
        0,
        0,
        0,
        28,
        212,
        1,
        0,
        0,
        0,
        30,
        222,
        1,
        0,
        0,
        0,
        32,
        224,
        1,
        0,
        0,
        0,
        34,
        227,
        1,
        0,
        0,
        0,
        36,
        235,
        1,
        0,
        0,
        0,
        38,
        238,
        1,
        0,
        0,
        0,
        40,
        251,
        1,
        0,
        0,
        0,
        42,
        253,
        1,
        0,
        0,
        0,
        44,
        256,
        1,
        0,
        0,
        0,
        46,
        258,
        1,
        0,
        0,
        0,
        48,
        265,
        1,
        0,
        0,
        0,
        50,
        268,
        1,
        0,
        0,
        0,
        52,
        282,
        1,
        0,
        0,
        0,
        54,
        284,
        1,
        0,
        0,
        0,
        56,
        292,
        1,
        0,
        0,
        0,
        58,
        294,
        1,
        0,
        0,
        0,
        60,
        296,
        1,
        0,
        0,
        0,
        62,
        298,
        1,
        0,
        0,
        0,
        64,
        306,
        1,
        0,
        0,
        0,
        66,
        314,
        1,
        0,
        0,
        0,
        68,
        318,
        1,
        0,
        0,
        0,
        70,
        325,
        1,
        0,
        0,
        0,
        72,
        329,
        1,
        0,
        0,
        0,
        74,
        331,
        1,
        0,
        0,
        0,
        76,
        333,
        1,
        0,
        0,
        0,
        78,
        336,
        1,
        0,
        0,
        0,
        80,
        344,
        1,
        0,
        0,
        0,
        82,
        346,
        1,
        0,
        0,
        0,
        84,
        353,
        1,
        0,
        0,
        0,
        86,
        355,
        1,
        0,
        0,
        0,
        88,
        363,
        1,
        0,
        0,
        0,
        90,
        365,
        1,
        0,
        0,
        0,
        92,
        367,
        1,
        0,
        0,
        0,
        94,
        369,
        1,
        0,
        0,
        0,
        96,
        377,
        1,
        0,
        0,
        0,
        98,
        385,
        1,
        0,
        0,
        0,
        100,
        387,
        1,
        0,
        0,
        0,
        102,
        402,
        1,
        0,
        0,
        0,
        104,
        409,
        1,
        0,
        0,
        0,
        106,
        411,
        1,
        0,
        0,
        0,
        108,
        418,
        1,
        0,
        0,
        0,
        110,
        420,
        1,
        0,
        0,
        0,
        112,
        422,
        1,
        0,
        0,
        0,
        114,
        424,
        1,
        0,
        0,
        0,
        116,
        426,
        1,
        0,
        0,
        0,
        118,
        428,
        1,
        0,
        0,
        0,
        120,
        430,
        1,
        0,
        0,
        0,
        122,
        123,
        3,
        2,
        1,
        0,
        123,
        124,
        5,
        0,
        0,
        1,
        124,
        1,
        1,
        0,
        0,
        0,
        125,
        127,
        3,
        6,
        3,
        0,
        126,
        128,
        3,
        10,
        5,
        0,
        127,
        126,
        1,
        0,
        0,
        0,
        127,
        128,
        1,
        0,
        0,
        0,
        128,
        129,
        1,
        0,
        0,
        0,
        129,
        130,
        3,
        12,
        6,
        0,
        130,
        131,
        3,
        14,
        7,
        0,
        131,
        3,
        1,
        0,
        0,
        0,
        132,
        133,
        3,
        2,
        1,
        0,
        133,
        5,
        1,
        0,
        0,
        0,
        134,
        135,
        5,
        1,
        0,
        0,
        135,
        136,
        3,
        8,
        4,
        0,
        136,
        7,
        1,
        0,
        0,
        0,
        137,
        139,
        5,
        2,
        0,
        0,
        138,
        140,
        3,
        46,
        23,
        0,
        139,
        138,
        1,
        0,
        0,
        0,
        139,
        140,
        1,
        0,
        0,
        0,
        140,
        141,
        1,
        0,
        0,
        0,
        141,
        142,
        5,
        3,
        0,
        0,
        142,
        9,
        1,
        0,
        0,
        0,
        143,
        144,
        5,
        4,
        0,
        0,
        144,
        145,
        5,
        46,
        0,
        0,
        145,
        11,
        1,
        0,
        0,
        0,
        146,
        148,
        5,
        5,
        0,
        0,
        147,
        146,
        1,
        0,
        0,
        0,
        147,
        148,
        1,
        0,
        0,
        0,
        148,
        149,
        1,
        0,
        0,
        0,
        149,
        150,
        3,
        26,
        13,
        0,
        150,
        13,
        1,
        0,
        0,
        0,
        151,
        153,
        3,
        18,
        9,
        0,
        152,
        151,
        1,
        0,
        0,
        0,
        152,
        153,
        1,
        0,
        0,
        0,
        153,
        155,
        1,
        0,
        0,
        0,
        154,
        156,
        3,
        16,
        8,
        0,
        155,
        154,
        1,
        0,
        0,
        0,
        155,
        156,
        1,
        0,
        0,
        0,
        156,
        15,
        1,
        0,
        0,
        0,
        157,
        159,
        3,
        22,
        11,
        0,
        158,
        160,
        3,
        24,
        12,
        0,
        159,
        158,
        1,
        0,
        0,
        0,
        159,
        160,
        1,
        0,
        0,
        0,
        160,
        166,
        1,
        0,
        0,
        0,
        161,
        163,
        3,
        24,
        12,
        0,
        162,
        164,
        3,
        22,
        11,
        0,
        163,
        162,
        1,
        0,
        0,
        0,
        163,
        164,
        1,
        0,
        0,
        0,
        164,
        166,
        1,
        0,
        0,
        0,
        165,
        157,
        1,
        0,
        0,
        0,
        165,
        161,
        1,
        0,
        0,
        0,
        166,
        17,
        1,
        0,
        0,
        0,
        167,
        168,
        5,
        6,
        0,
        0,
        168,
        170,
        5,
        7,
        0,
        0,
        169,
        171,
        3,
        20,
        10,
        0,
        170,
        169,
        1,
        0,
        0,
        0,
        171,
        172,
        1,
        0,
        0,
        0,
        172,
        170,
        1,
        0,
        0,
        0,
        172,
        173,
        1,
        0,
        0,
        0,
        173,
        19,
        1,
        0,
        0,
        0,
        174,
        175,
        7,
        0,
        0,
        0,
        175,
        181,
        3,
        106,
        53,
        0,
        176,
        179,
        3,
        44,
        22,
        0,
        177,
        179,
        3,
        82,
        41,
        0,
        178,
        176,
        1,
        0,
        0,
        0,
        178,
        177,
        1,
        0,
        0,
        0,
        179,
        181,
        1,
        0,
        0,
        0,
        180,
        174,
        1,
        0,
        0,
        0,
        180,
        178,
        1,
        0,
        0,
        0,
        181,
        21,
        1,
        0,
        0,
        0,
        182,
        183,
        5,
        10,
        0,
        0,
        183,
        184,
        5,
        50,
        0,
        0,
        184,
        23,
        1,
        0,
        0,
        0,
        185,
        186,
        5,
        11,
        0,
        0,
        186,
        187,
        5,
        50,
        0,
        0,
        187,
        25,
        1,
        0,
        0,
        0,
        188,
        208,
        5,
        2,
        0,
        0,
        189,
        209,
        3,
        4,
        2,
        0,
        190,
        192,
        3,
        28,
        14,
        0,
        191,
        190,
        1,
        0,
        0,
        0,
        191,
        192,
        1,
        0,
        0,
        0,
        192,
        205,
        1,
        0,
        0,
        0,
        193,
        196,
        3,
        30,
        15,
        0,
        194,
        196,
        3,
        42,
        21,
        0,
        195,
        193,
        1,
        0,
        0,
        0,
        195,
        194,
        1,
        0,
        0,
        0,
        196,
        198,
        1,
        0,
        0,
        0,
        197,
        199,
        5,
        12,
        0,
        0,
        198,
        197,
        1,
        0,
        0,
        0,
        198,
        199,
        1,
        0,
        0,
        0,
        199,
        201,
        1,
        0,
        0,
        0,
        200,
        202,
        3,
        28,
        14,
        0,
        201,
        200,
        1,
        0,
        0,
        0,
        201,
        202,
        1,
        0,
        0,
        0,
        202,
        204,
        1,
        0,
        0,
        0,
        203,
        195,
        1,
        0,
        0,
        0,
        204,
        207,
        1,
        0,
        0,
        0,
        205,
        203,
        1,
        0,
        0,
        0,
        205,
        206,
        1,
        0,
        0,
        0,
        206,
        209,
        1,
        0,
        0,
        0,
        207,
        205,
        1,
        0,
        0,
        0,
        208,
        189,
        1,
        0,
        0,
        0,
        208,
        191,
        1,
        0,
        0,
        0,
        209,
        210,
        1,
        0,
        0,
        0,
        210,
        211,
        5,
        3,
        0,
        0,
        211,
        27,
        1,
        0,
        0,
        0,
        212,
        217,
        3,
        48,
        24,
        0,
        213,
        215,
        5,
        12,
        0,
        0,
        214,
        216,
        3,
        28,
        14,
        0,
        215,
        214,
        1,
        0,
        0,
        0,
        215,
        216,
        1,
        0,
        0,
        0,
        216,
        218,
        1,
        0,
        0,
        0,
        217,
        213,
        1,
        0,
        0,
        0,
        217,
        218,
        1,
        0,
        0,
        0,
        218,
        29,
        1,
        0,
        0,
        0,
        219,
        223,
        3,
        32,
        16,
        0,
        220,
        223,
        3,
        34,
        17,
        0,
        221,
        223,
        3,
        36,
        18,
        0,
        222,
        219,
        1,
        0,
        0,
        0,
        222,
        220,
        1,
        0,
        0,
        0,
        222,
        221,
        1,
        0,
        0,
        0,
        223,
        31,
        1,
        0,
        0,
        0,
        224,
        225,
        5,
        13,
        0,
        0,
        225,
        226,
        3,
        26,
        13,
        0,
        226,
        33,
        1,
        0,
        0,
        0,
        227,
        232,
        3,
        26,
        13,
        0,
        228,
        229,
        7,
        1,
        0,
        0,
        229,
        231,
        3,
        26,
        13,
        0,
        230,
        228,
        1,
        0,
        0,
        0,
        231,
        234,
        1,
        0,
        0,
        0,
        232,
        230,
        1,
        0,
        0,
        0,
        232,
        233,
        1,
        0,
        0,
        0,
        233,
        35,
        1,
        0,
        0,
        0,
        234,
        232,
        1,
        0,
        0,
        0,
        235,
        236,
        5,
        16,
        0,
        0,
        236,
        237,
        3,
        38,
        19,
        0,
        237,
        37,
        1,
        0,
        0,
        0,
        238,
        239,
        3,
        82,
        41,
        0,
        239,
        243,
        5,
        2,
        0,
        0,
        240,
        242,
        3,
        40,
        20,
        0,
        241,
        240,
        1,
        0,
        0,
        0,
        242,
        245,
        1,
        0,
        0,
        0,
        243,
        241,
        1,
        0,
        0,
        0,
        243,
        244,
        1,
        0,
        0,
        0,
        244,
        246,
        1,
        0,
        0,
        0,
        245,
        243,
        1,
        0,
        0,
        0,
        246,
        247,
        5,
        3,
        0,
        0,
        247,
        39,
        1,
        0,
        0,
        0,
        248,
        252,
        3,
        108,
        54,
        0,
        249,
        252,
        3,
        116,
        58,
        0,
        250,
        252,
        3,
        118,
        59,
        0,
        251,
        248,
        1,
        0,
        0,
        0,
        251,
        249,
        1,
        0,
        0,
        0,
        251,
        250,
        1,
        0,
        0,
        0,
        252,
        41,
        1,
        0,
        0,
        0,
        253,
        254,
        5,
        17,
        0,
        0,
        254,
        255,
        3,
        44,
        22,
        0,
        255,
        43,
        1,
        0,
        0,
        0,
        256,
        257,
        3,
        106,
        53,
        0,
        257,
        45,
        1,
        0,
        0,
        0,
        258,
        263,
        3,
        48,
        24,
        0,
        259,
        261,
        5,
        12,
        0,
        0,
        260,
        262,
        3,
        46,
        23,
        0,
        261,
        260,
        1,
        0,
        0,
        0,
        261,
        262,
        1,
        0,
        0,
        0,
        262,
        264,
        1,
        0,
        0,
        0,
        263,
        259,
        1,
        0,
        0,
        0,
        263,
        264,
        1,
        0,
        0,
        0,
        264,
        47,
        1,
        0,
        0,
        0,
        265,
        266,
        3,
        80,
        40,
        0,
        266,
        267,
        3,
        50,
        25,
        0,
        267,
        49,
        1,
        0,
        0,
        0,
        268,
        269,
        3,
        58,
        29,
        0,
        269,
        278,
        3,
        54,
        27,
        0,
        270,
        274,
        5,
        18,
        0,
        0,
        271,
        272,
        3,
        58,
        29,
        0,
        272,
        273,
        3,
        54,
        27,
        0,
        273,
        275,
        1,
        0,
        0,
        0,
        274,
        271,
        1,
        0,
        0,
        0,
        274,
        275,
        1,
        0,
        0,
        0,
        275,
        277,
        1,
        0,
        0,
        0,
        276,
        270,
        1,
        0,
        0,
        0,
        277,
        280,
        1,
        0,
        0,
        0,
        278,
        276,
        1,
        0,
        0,
        0,
        278,
        279,
        1,
        0,
        0,
        0,
        279,
        51,
        1,
        0,
        0,
        0,
        280,
        278,
        1,
        0,
        0,
        0,
        281,
        283,
        3,
        50,
        25,
        0,
        282,
        281,
        1,
        0,
        0,
        0,
        282,
        283,
        1,
        0,
        0,
        0,
        283,
        53,
        1,
        0,
        0,
        0,
        284,
        289,
        3,
        56,
        28,
        0,
        285,
        286,
        5,
        19,
        0,
        0,
        286,
        288,
        3,
        56,
        28,
        0,
        287,
        285,
        1,
        0,
        0,
        0,
        288,
        291,
        1,
        0,
        0,
        0,
        289,
        287,
        1,
        0,
        0,
        0,
        289,
        290,
        1,
        0,
        0,
        0,
        290,
        55,
        1,
        0,
        0,
        0,
        291,
        289,
        1,
        0,
        0,
        0,
        292,
        293,
        3,
        78,
        39,
        0,
        293,
        57,
        1,
        0,
        0,
        0,
        294,
        295,
        3,
        60,
        30,
        0,
        295,
        59,
        1,
        0,
        0,
        0,
        296,
        297,
        3,
        62,
        31,
        0,
        297,
        61,
        1,
        0,
        0,
        0,
        298,
        303,
        3,
        64,
        32,
        0,
        299,
        300,
        5,
        20,
        0,
        0,
        300,
        302,
        3,
        64,
        32,
        0,
        301,
        299,
        1,
        0,
        0,
        0,
        302,
        305,
        1,
        0,
        0,
        0,
        303,
        301,
        1,
        0,
        0,
        0,
        303,
        304,
        1,
        0,
        0,
        0,
        304,
        63,
        1,
        0,
        0,
        0,
        305,
        303,
        1,
        0,
        0,
        0,
        306,
        311,
        3,
        66,
        33,
        0,
        307,
        308,
        5,
        21,
        0,
        0,
        308,
        310,
        3,
        66,
        33,
        0,
        309,
        307,
        1,
        0,
        0,
        0,
        310,
        313,
        1,
        0,
        0,
        0,
        311,
        309,
        1,
        0,
        0,
        0,
        311,
        312,
        1,
        0,
        0,
        0,
        312,
        65,
        1,
        0,
        0,
        0,
        313,
        311,
        1,
        0,
        0,
        0,
        314,
        316,
        3,
        70,
        35,
        0,
        315,
        317,
        3,
        68,
        34,
        0,
        316,
        315,
        1,
        0,
        0,
        0,
        316,
        317,
        1,
        0,
        0,
        0,
        317,
        67,
        1,
        0,
        0,
        0,
        318,
        319,
        7,
        2,
        0,
        0,
        319,
        69,
        1,
        0,
        0,
        0,
        320,
        326,
        3,
        72,
        36,
        0,
        321,
        322,
        5,
        25,
        0,
        0,
        322,
        323,
        3,
        60,
        30,
        0,
        323,
        324,
        5,
        26,
        0,
        0,
        324,
        326,
        1,
        0,
        0,
        0,
        325,
        320,
        1,
        0,
        0,
        0,
        325,
        321,
        1,
        0,
        0,
        0,
        326,
        71,
        1,
        0,
        0,
        0,
        327,
        330,
        3,
        74,
        37,
        0,
        328,
        330,
        3,
        76,
        38,
        0,
        329,
        327,
        1,
        0,
        0,
        0,
        329,
        328,
        1,
        0,
        0,
        0,
        330,
        73,
        1,
        0,
        0,
        0,
        331,
        332,
        5,
        45,
        0,
        0,
        332,
        75,
        1,
        0,
        0,
        0,
        333,
        334,
        5,
        27,
        0,
        0,
        334,
        335,
        3,
        74,
        37,
        0,
        335,
        77,
        1,
        0,
        0,
        0,
        336,
        339,
        3,
        80,
        40,
        0,
        337,
        338,
        5,
        28,
        0,
        0,
        338,
        340,
        3,
        82,
        41,
        0,
        339,
        337,
        1,
        0,
        0,
        0,
        339,
        340,
        1,
        0,
        0,
        0,
        340,
        79,
        1,
        0,
        0,
        0,
        341,
        345,
        3,
        82,
        41,
        0,
        342,
        345,
        3,
        84,
        42,
        0,
        343,
        345,
        3,
        86,
        43,
        0,
        344,
        341,
        1,
        0,
        0,
        0,
        344,
        342,
        1,
        0,
        0,
        0,
        344,
        343,
        1,
        0,
        0,
        0,
        345,
        81,
        1,
        0,
        0,
        0,
        346,
        347,
        7,
        3,
        0,
        0,
        347,
        83,
        1,
        0,
        0,
        0,
        348,
        354,
        3,
        108,
        54,
        0,
        349,
        354,
        3,
        116,
        58,
        0,
        350,
        354,
        3,
        118,
        59,
        0,
        351,
        354,
        3,
        120,
        60,
        0,
        352,
        354,
        5,
        65,
        0,
        0,
        353,
        348,
        1,
        0,
        0,
        0,
        353,
        349,
        1,
        0,
        0,
        0,
        353,
        350,
        1,
        0,
        0,
        0,
        353,
        351,
        1,
        0,
        0,
        0,
        353,
        352,
        1,
        0,
        0,
        0,
        354,
        85,
        1,
        0,
        0,
        0,
        355,
        356,
        3,
        90,
        45,
        0,
        356,
        358,
        5,
        25,
        0,
        0,
        357,
        359,
        3,
        88,
        44,
        0,
        358,
        357,
        1,
        0,
        0,
        0,
        358,
        359,
        1,
        0,
        0,
        0,
        359,
        360,
        1,
        0,
        0,
        0,
        360,
        361,
        3,
        82,
        41,
        0,
        361,
        362,
        5,
        26,
        0,
        0,
        362,
        87,
        1,
        0,
        0,
        0,
        363,
        364,
        5,
        29,
        0,
        0,
        364,
        89,
        1,
        0,
        0,
        0,
        365,
        366,
        7,
        4,
        0,
        0,
        366,
        91,
        1,
        0,
        0,
        0,
        367,
        368,
        3,
        94,
        47,
        0,
        368,
        93,
        1,
        0,
        0,
        0,
        369,
        374,
        3,
        96,
        48,
        0,
        370,
        371,
        5,
        35,
        0,
        0,
        371,
        373,
        3,
        96,
        48,
        0,
        372,
        370,
        1,
        0,
        0,
        0,
        373,
        376,
        1,
        0,
        0,
        0,
        374,
        372,
        1,
        0,
        0,
        0,
        374,
        375,
        1,
        0,
        0,
        0,
        375,
        95,
        1,
        0,
        0,
        0,
        376,
        374,
        1,
        0,
        0,
        0,
        377,
        382,
        3,
        98,
        49,
        0,
        378,
        379,
        5,
        36,
        0,
        0,
        379,
        381,
        3,
        98,
        49,
        0,
        380,
        378,
        1,
        0,
        0,
        0,
        381,
        384,
        1,
        0,
        0,
        0,
        382,
        380,
        1,
        0,
        0,
        0,
        382,
        383,
        1,
        0,
        0,
        0,
        383,
        97,
        1,
        0,
        0,
        0,
        384,
        382,
        1,
        0,
        0,
        0,
        385,
        386,
        3,
        100,
        50,
        0,
        386,
        99,
        1,
        0,
        0,
        0,
        387,
        400,
        3,
        102,
        51,
        0,
        388,
        389,
        5,
        37,
        0,
        0,
        389,
        401,
        3,
        102,
        51,
        0,
        390,
        391,
        5,
        38,
        0,
        0,
        391,
        401,
        3,
        102,
        51,
        0,
        392,
        393,
        5,
        39,
        0,
        0,
        393,
        401,
        3,
        102,
        51,
        0,
        394,
        395,
        5,
        40,
        0,
        0,
        395,
        401,
        3,
        102,
        51,
        0,
        396,
        397,
        5,
        41,
        0,
        0,
        397,
        401,
        3,
        102,
        51,
        0,
        398,
        399,
        5,
        42,
        0,
        0,
        399,
        401,
        3,
        102,
        51,
        0,
        400,
        388,
        1,
        0,
        0,
        0,
        400,
        390,
        1,
        0,
        0,
        0,
        400,
        392,
        1,
        0,
        0,
        0,
        400,
        394,
        1,
        0,
        0,
        0,
        400,
        396,
        1,
        0,
        0,
        0,
        400,
        398,
        1,
        0,
        0,
        0,
        400,
        401,
        1,
        0,
        0,
        0,
        401,
        101,
        1,
        0,
        0,
        0,
        402,
        403,
        3,
        104,
        52,
        0,
        403,
        103,
        1,
        0,
        0,
        0,
        404,
        410,
        3,
        106,
        53,
        0,
        405,
        410,
        3,
        108,
        54,
        0,
        406,
        410,
        3,
        116,
        58,
        0,
        407,
        410,
        3,
        118,
        59,
        0,
        408,
        410,
        3,
        80,
        40,
        0,
        409,
        404,
        1,
        0,
        0,
        0,
        409,
        405,
        1,
        0,
        0,
        0,
        409,
        406,
        1,
        0,
        0,
        0,
        409,
        407,
        1,
        0,
        0,
        0,
        409,
        408,
        1,
        0,
        0,
        0,
        410,
        105,
        1,
        0,
        0,
        0,
        411,
        412,
        5,
        25,
        0,
        0,
        412,
        413,
        3,
        92,
        46,
        0,
        413,
        414,
        5,
        26,
        0,
        0,
        414,
        107,
        1,
        0,
        0,
        0,
        415,
        419,
        3,
        110,
        55,
        0,
        416,
        419,
        3,
        112,
        56,
        0,
        417,
        419,
        3,
        114,
        57,
        0,
        418,
        415,
        1,
        0,
        0,
        0,
        418,
        416,
        1,
        0,
        0,
        0,
        418,
        417,
        1,
        0,
        0,
        0,
        419,
        109,
        1,
        0,
        0,
        0,
        420,
        421,
        7,
        5,
        0,
        0,
        421,
        111,
        1,
        0,
        0,
        0,
        422,
        423,
        7,
        6,
        0,
        0,
        423,
        113,
        1,
        0,
        0,
        0,
        424,
        425,
        7,
        7,
        0,
        0,
        425,
        115,
        1,
        0,
        0,
        0,
        426,
        427,
        7,
        8,
        0,
        0,
        427,
        117,
        1,
        0,
        0,
        0,
        428,
        429,
        7,
        9,
        0,
        0,
        429,
        119,
        1,
        0,
        0,
        0,
        430,
        431,
        7,
        10,
        0,
        0,
        431,
        121,
        1,
        0,
        0,
        0,
        43,
        127,
        139,
        147,
        152,
        155,
        159,
        163,
        165,
        172,
        178,
        180,
        191,
        195,
        198,
        201,
        205,
        208,
        215,
        217,
        222,
        232,
        243,
        251,
        261,
        263,
        274,
        278,
        282,
        289,
        303,
        311,
        316,
        325,
        329,
        339,
        344,
        353,
        358,
        374,
        382,
        400,
        409,
        418,
    ]


class QuerycatParser(Parser):

    grammarFileName = "Querycat.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = [
        "<INVALID>",
        "'SELECT'",
        "'{'",
        "'}'",
        "'FROM'",
        "'WHERE'",
        "'ORDER'",
        "'BY'",
        "'ASC'",
        "'DESC'",
        "'LIMIT'",
        "'OFFSET'",
        "'.'",
        "'OPTIONAL'",
        "'UNION'",
        "'MINUS'",
        "'VALUES'",
        "'FILTER'",
        "';'",
        "','",
        "'|'",
        "'/'",
        "'?'",
        "'*'",
        "'+'",
        "'('",
        "')'",
        "'-'",
        "'AS'",
        "'DISTINCT'",
        "'COUNT'",
        "'SUM'",
        "'AVG'",
        "'MIN'",
        "'MAX'",
        "'||'",
        "'&&'",
        "'='",
        "'!='",
        "'<'",
        "'>'",
        "'<='",
        "'>='",
        "'true'",
        "'false'",
    ]

    symbolicNames = [
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "SCHEMA_MORPHISM",
        "SCHEMA_IDENTIFIER",
        "BLANK_NODE_LABEL",
        "VAR1",
        "VAR2",
        "INTEGER",
        "DECIMAL",
        "DOUBLE",
        "INTEGER_POSITIVE",
        "DECIMAL_POSITIVE",
        "DOUBLE_POSITIVE",
        "INTEGER_NEGATIVE",
        "DECIMAL_NEGATIVE",
        "DOUBLE_NEGATIVE",
        "EXPONENT",
        "STRING_LITERAL1",
        "STRING_LITERAL2",
        "STRING_LITERAL_LONG1",
        "STRING_LITERAL_LONG2",
        "ECHAR",
        "NIL",
        "ANON",
        "PN_CHARS_U",
        "VARNAME",
        "PN_PREFIX",
        "PN_LOCAL",
        "WS",
    ]

    RULE_query = 0
    RULE_selectQuery = 1
    RULE_subSelect = 2
    RULE_selectClause = 3
    RULE_selectGraphPattern = 4
    RULE_fromClause = 5
    RULE_whereClause = 6
    RULE_solutionModifier = 7
    RULE_limitOffsetClauses = 8
    RULE_orderClause = 9
    RULE_orderCondition = 10
    RULE_limitClause = 11
    RULE_offsetClause = 12
    RULE_groupGraphPattern = 13
    RULE_triplesBlock = 14
    RULE_graphPatternNotTriples = 15
    RULE_optionalGraphPattern = 16
    RULE_groupOrUnionGraphPattern = 17
    RULE_inlineData = 18
    RULE_dataBlock = 19
    RULE_dataBlockValue = 20
    RULE_filter_ = 21
    RULE_constraint = 22
    RULE_selectTriples = 23
    RULE_triplesSameSubject = 24
    RULE_propertyListNotEmpty = 25
    RULE_propertyList = 26
    RULE_objectList = 27
    RULE_object_ = 28
    RULE_verb = 29
    RULE_schemaMorphismOrPath = 30
    RULE_pathAlternative = 31
    RULE_pathSequence = 32
    RULE_pathWithMod = 33
    RULE_pathMod = 34
    RULE_pathPrimary = 35
    RULE_schemaMorphism = 36
    RULE_primaryMorphism = 37
    RULE_dualMorphism = 38
    RULE_graphNode = 39
    RULE_varOrTerm = 40
    RULE_var_ = 41
    RULE_constantTerm = 42
    RULE_aggregationTerm = 43
    RULE_distinctModifier = 44
    RULE_aggregationFunc = 45
    RULE_expression = 46
    RULE_conditionalOrExpression = 47
    RULE_conditionalAndExpression = 48
    RULE_valueLogical = 49
    RULE_relationalExpression = 50
    RULE_expressionPart = 51
    RULE_primaryExpression = 52
    RULE_brackettedExpression = 53
    RULE_numericLiteral = 54
    RULE_numericLiteralUnsigned = 55
    RULE_numericLiteralPositive = 56
    RULE_numericLiteralNegative = 57
    RULE_booleanLiteral = 58
    RULE_string_ = 59
    RULE_blankNode = 60

    ruleNames = [
        "query",
        "selectQuery",
        "subSelect",
        "selectClause",
        "selectGraphPattern",
        "fromClause",
        "whereClause",
        "solutionModifier",
        "limitOffsetClauses",
        "orderClause",
        "orderCondition",
        "limitClause",
        "offsetClause",
        "groupGraphPattern",
        "triplesBlock",
        "graphPatternNotTriples",
        "optionalGraphPattern",
        "groupOrUnionGraphPattern",
        "inlineData",
        "dataBlock",
        "dataBlockValue",
        "filter_",
        "constraint",
        "selectTriples",
        "triplesSameSubject",
        "propertyListNotEmpty",
        "propertyList",
        "objectList",
        "object_",
        "verb",
        "schemaMorphismOrPath",
        "pathAlternative",
        "pathSequence",
        "pathWithMod",
        "pathMod",
        "pathPrimary",
        "schemaMorphism",
        "primaryMorphism",
        "dualMorphism",
        "graphNode",
        "varOrTerm",
        "var_",
        "constantTerm",
        "aggregationTerm",
        "distinctModifier",
        "aggregationFunc",
        "expression",
        "conditionalOrExpression",
        "conditionalAndExpression",
        "valueLogical",
        "relationalExpression",
        "expressionPart",
        "primaryExpression",
        "brackettedExpression",
        "numericLiteral",
        "numericLiteralUnsigned",
        "numericLiteralPositive",
        "numericLiteralNegative",
        "booleanLiteral",
        "string_",
        "blankNode",
    ]

    EOF = Token.EOF
    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    T__40 = 41
    T__41 = 42
    T__42 = 43
    T__43 = 44
    SCHEMA_MORPHISM = 45
    SCHEMA_IDENTIFIER = 46
    BLANK_NODE_LABEL = 47
    VAR1 = 48
    VAR2 = 49
    INTEGER = 50
    DECIMAL = 51
    DOUBLE = 52
    INTEGER_POSITIVE = 53
    DECIMAL_POSITIVE = 54
    DOUBLE_POSITIVE = 55
    INTEGER_NEGATIVE = 56
    DECIMAL_NEGATIVE = 57
    DOUBLE_NEGATIVE = 58
    EXPONENT = 59
    STRING_LITERAL1 = 60
    STRING_LITERAL2 = 61
    STRING_LITERAL_LONG1 = 62
    STRING_LITERAL_LONG2 = 63
    ECHAR = 64
    NIL = 65
    ANON = 66
    PN_CHARS_U = 67
    VARNAME = 68
    PN_PREFIX = 69
    PN_LOCAL = 70
    WS = 71

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = ParserATNSimulator(
            self, self.atn, self.decisionsToDFA, self.sharedContextCache
        )
        self._predicates = None

    class QueryContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectQuery(self):
            return self.getTypedRuleContext(QuerycatParser.SelectQueryContext, 0)

        def EOF(self):
            return self.getToken(QuerycatParser.EOF, 0)

        def getRuleIndex(self):
            return QuerycatParser.RULE_query

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQuery"):
                listener.enterQuery(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQuery"):
                listener.exitQuery(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitQuery"):
                return visitor.visitQuery(self)
            else:
                return visitor.visitChildren(self)

    def query(self):

        localctx = QuerycatParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_query)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 122
            self.selectQuery()
            self.state = 123
            self.match(QuerycatParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectQueryContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectClause(self):
            return self.getTypedRuleContext(QuerycatParser.SelectClauseContext, 0)

        def whereClause(self):
            return self.getTypedRuleContext(QuerycatParser.WhereClauseContext, 0)

        def solutionModifier(self):
            return self.getTypedRuleContext(QuerycatParser.SolutionModifierContext, 0)

        def fromClause(self):
            return self.getTypedRuleContext(QuerycatParser.FromClauseContext, 0)

        def getRuleIndex(self):
            return QuerycatParser.RULE_selectQuery

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSelectQuery"):
                listener.enterSelectQuery(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSelectQuery"):
                listener.exitSelectQuery(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSelectQuery"):
                return visitor.visitSelectQuery(self)
            else:
                return visitor.visitChildren(self)

    def selectQuery(self):

        localctx = QuerycatParser.SelectQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_selectQuery)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 125
            self.selectClause()
            self.state = 127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 4:
                self.state = 126
                self.fromClause()

            self.state = 129
            self.whereClause()
            self.state = 130
            self.solutionModifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubSelectContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectQuery(self):
            return self.getTypedRuleContext(QuerycatParser.SelectQueryContext, 0)

        def getRuleIndex(self):
            return QuerycatParser.RULE_subSelect

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSubSelect"):
                listener.enterSubSelect(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSubSelect"):
                listener.exitSubSelect(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSubSelect"):
                return visitor.visitSubSelect(self)
            else:
                return visitor.visitChildren(self)

    def subSelect(self):

        localctx = QuerycatParser.SubSelectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_subSelect)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 132
            self.selectQuery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectGraphPattern(self):
            return self.getTypedRuleContext(QuerycatParser.SelectGraphPatternContext, 0)

        def getRuleIndex(self):
            return QuerycatParser.RULE_selectClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSelectClause"):
                listener.enterSelectClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSelectClause"):
                listener.exitSelectClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSelectClause"):
                return visitor.visitSelectClause(self)
            else:
                return visitor.visitChildren(self)

    def selectClause(self):

        localctx = QuerycatParser.SelectClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_selectClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 134
            self.match(QuerycatParser.T__0)
            self.state = 135
            self.selectGraphPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectGraphPatternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectTriples(self):
            return self.getTypedRuleContext(QuerycatParser.SelectTriplesContext, 0)

        def getRuleIndex(self):
            return QuerycatParser.RULE_selectGraphPattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSelectGraphPattern"):
                listener.enterSelectGraphPattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSelectGraphPattern"):
                listener.exitSelectGraphPattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSelectGraphPattern"):
                return visitor.visitSelectGraphPattern(self)
            else:
                return visitor.visitChildren(self)

    def selectGraphPattern(self):

        localctx = QuerycatParser.SelectGraphPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_selectGraphPattern)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 137
            self.match(QuerycatParser.T__1)
            self.state = 139
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 30)) & ~0x3F) == 0 and ((1 << (_la - 30)) & 106837205023) != 0:
                self.state = 138
                self.selectTriples()

            self.state = 141
            self.match(QuerycatParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FromClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCHEMA_IDENTIFIER(self):
            return self.getToken(QuerycatParser.SCHEMA_IDENTIFIER, 0)

        def getRuleIndex(self):
            return QuerycatParser.RULE_fromClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFromClause"):
                listener.enterFromClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFromClause"):
                listener.exitFromClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFromClause"):
                return visitor.visitFromClause(self)
            else:
                return visitor.visitChildren(self)

    def fromClause(self):

        localctx = QuerycatParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 143
            self.match(QuerycatParser.T__3)
            self.state = 144
            self.match(QuerycatParser.SCHEMA_IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhereClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupGraphPattern(self):
            return self.getTypedRuleContext(QuerycatParser.GroupGraphPatternContext, 0)

        def getRuleIndex(self):
            return QuerycatParser.RULE_whereClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWhereClause"):
                listener.enterWhereClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWhereClause"):
                listener.exitWhereClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWhereClause"):
                return visitor.visitWhereClause(self)
            else:
                return visitor.visitChildren(self)

    def whereClause(self):

        localctx = QuerycatParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_whereClause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 5:
                self.state = 146
                self.match(QuerycatParser.T__4)

            self.state = 149
            self.groupGraphPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SolutionModifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderClause(self):
            return self.getTypedRuleContext(QuerycatParser.OrderClauseContext, 0)

        def limitOffsetClauses(self):
            return self.getTypedRuleContext(QuerycatParser.LimitOffsetClausesContext, 0)

        def getRuleIndex(self):
            return QuerycatParser.RULE_solutionModifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSolutionModifier"):
                listener.enterSolutionModifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSolutionModifier"):
                listener.exitSolutionModifier(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSolutionModifier"):
                return visitor.visitSolutionModifier(self)
            else:
                return visitor.visitChildren(self)

    def solutionModifier(self):

        localctx = QuerycatParser.SolutionModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_solutionModifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 152
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 6:
                self.state = 151
                self.orderClause()

            self.state = 155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 10 or _la == 11:
                self.state = 154
                self.limitOffsetClauses()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LimitOffsetClausesContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def limitClause(self):
            return self.getTypedRuleContext(QuerycatParser.LimitClauseContext, 0)

        def offsetClause(self):
            return self.getTypedRuleContext(QuerycatParser.OffsetClauseContext, 0)

        def getRuleIndex(self):
            return QuerycatParser.RULE_limitOffsetClauses

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLimitOffsetClauses"):
                listener.enterLimitOffsetClauses(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLimitOffsetClauses"):
                listener.exitLimitOffsetClauses(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLimitOffsetClauses"):
                return visitor.visitLimitOffsetClauses(self)
            else:
                return visitor.visitChildren(self)

    def limitOffsetClauses(self):

        localctx = QuerycatParser.LimitOffsetClausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_limitOffsetClauses)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 165
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10]:
                self.state = 157
                self.limitClause()
                self.state = 159
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 11:
                    self.state = 158
                    self.offsetClause()

                pass
            elif token in [11]:
                self.state = 161
                self.offsetClause()
                self.state = 163
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 10:
                    self.state = 162
                    self.limitClause()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrderClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderCondition(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(QuerycatParser.OrderConditionContext)
            else:
                return self.getTypedRuleContext(QuerycatParser.OrderConditionContext, i)

        def getRuleIndex(self):
            return QuerycatParser.RULE_orderClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOrderClause"):
                listener.enterOrderClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOrderClause"):
                listener.exitOrderClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOrderClause"):
                return visitor.visitOrderClause(self)
            else:
                return visitor.visitChildren(self)

    def orderClause(self):

        localctx = QuerycatParser.OrderClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_orderClause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 167
            self.match(QuerycatParser.T__5)
            self.state = 168
            self.match(QuerycatParser.T__6)
            self.state = 170
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 169
                self.orderCondition()
                self.state = 172
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((_la) & ~0x3F) == 0 and ((1 << _la) & 844424963687168) != 0):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrderConditionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def brackettedExpression(self):
            return self.getTypedRuleContext(
                QuerycatParser.BrackettedExpressionContext, 0
            )

        def constraint(self):
            return self.getTypedRuleContext(QuerycatParser.ConstraintContext, 0)

        def var_(self):
            return self.getTypedRuleContext(QuerycatParser.Var_Context, 0)

        def getRuleIndex(self):
            return QuerycatParser.RULE_orderCondition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOrderCondition"):
                listener.enterOrderCondition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOrderCondition"):
                listener.exitOrderCondition(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOrderCondition"):
                return visitor.visitOrderCondition(self)
            else:
                return visitor.visitChildren(self)

    def orderCondition(self):

        localctx = QuerycatParser.OrderConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_orderCondition)
        self._la = 0  # Token type
        try:
            self.state = 180
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8, 9]:
                self.enterOuterAlt(localctx, 1)
                self.state = 174
                _la = self._input.LA(1)
                if not (_la == 8 or _la == 9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 175
                self.brackettedExpression()
                pass
            elif token in [25, 48, 49]:
                self.enterOuterAlt(localctx, 2)
                self.state = 178
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [25]:
                    self.state = 176
                    self.constraint()
                    pass
                elif token in [48, 49]:
                    self.state = 177
                    self.var_()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LimitClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER(self):
            return self.getToken(QuerycatParser.INTEGER, 0)

        def getRuleIndex(self):
            return QuerycatParser.RULE_limitClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLimitClause"):
                listener.enterLimitClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLimitClause"):
                listener.exitLimitClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLimitClause"):
                return visitor.visitLimitClause(self)
            else:
                return visitor.visitChildren(self)

    def limitClause(self):

        localctx = QuerycatParser.LimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_limitClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 182
            self.match(QuerycatParser.T__9)
            self.state = 183
            self.match(QuerycatParser.INTEGER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OffsetClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER(self):
            return self.getToken(QuerycatParser.INTEGER, 0)

        def getRuleIndex(self):
            return QuerycatParser.RULE_offsetClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOffsetClause"):
                listener.enterOffsetClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOffsetClause"):
                listener.exitOffsetClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOffsetClause"):
                return visitor.visitOffsetClause(self)
            else:
                return visitor.visitChildren(self)

    def offsetClause(self):

        localctx = QuerycatParser.OffsetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_offsetClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 185
            self.match(QuerycatParser.T__10)
            self.state = 186
            self.match(QuerycatParser.INTEGER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GroupGraphPatternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subSelect(self):
            return self.getTypedRuleContext(QuerycatParser.SubSelectContext, 0)

        def triplesBlock(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(QuerycatParser.TriplesBlockContext)
            else:
                return self.getTypedRuleContext(QuerycatParser.TriplesBlockContext, i)

        def graphPatternNotTriples(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    QuerycatParser.GraphPatternNotTriplesContext
                )
            else:
                return self.getTypedRuleContext(
                    QuerycatParser.GraphPatternNotTriplesContext, i
                )

        def filter_(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(QuerycatParser.Filter_Context)
            else:
                return self.getTypedRuleContext(QuerycatParser.Filter_Context, i)

        def getRuleIndex(self):
            return QuerycatParser.RULE_groupGraphPattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGroupGraphPattern"):
                listener.enterGroupGraphPattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGroupGraphPattern"):
                listener.exitGroupGraphPattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGroupGraphPattern"):
                return visitor.visitGroupGraphPattern(self)
            else:
                return visitor.visitChildren(self)

    def groupGraphPattern(self):

        localctx = QuerycatParser.GroupGraphPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_groupGraphPattern)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 188
            self.match(QuerycatParser.T__1)
            self.state = 208
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1]:
                self.state = 189
                self.subSelect()
                pass
            elif token in [
                2,
                3,
                13,
                16,
                17,
                30,
                31,
                32,
                33,
                34,
                43,
                44,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                60,
                61,
                65,
                66,
            ]:
                self.state = 191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la - 30)) & ~0x3F) == 0 and (
                    (1 << (_la - 30)) & 106837205023
                ) != 0:
                    self.state = 190
                    self.triplesBlock()

                self.state = 205
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((_la) & ~0x3F) == 0 and ((1 << _la) & 204804) != 0:
                    self.state = 195
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [2, 13, 16]:
                        self.state = 193
                        self.graphPatternNotTriples()
                        pass
                    elif token in [17]:
                        self.state = 194
                        self.filter_()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 198
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 12:
                        self.state = 197
                        self.match(QuerycatParser.T__11)

                    self.state = 201
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la - 30)) & ~0x3F) == 0 and (
                        (1 << (_la - 30)) & 106837205023
                    ) != 0:
                        self.state = 200
                        self.triplesBlock()

                    self.state = 207
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 210
            self.match(QuerycatParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TriplesBlockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def triplesSameSubject(self):
            return self.getTypedRuleContext(QuerycatParser.TriplesSameSubjectContext, 0)

        def triplesBlock(self):
            return self.getTypedRuleContext(QuerycatParser.TriplesBlockContext, 0)

        def getRuleIndex(self):
            return QuerycatParser.RULE_triplesBlock

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTriplesBlock"):
                listener.enterTriplesBlock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTriplesBlock"):
                listener.exitTriplesBlock(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTriplesBlock"):
                return visitor.visitTriplesBlock(self)
            else:
                return visitor.visitChildren(self)

    def triplesBlock(self):

        localctx = QuerycatParser.TriplesBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_triplesBlock)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 212
            self.triplesSameSubject()
            self.state = 217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 12:
                self.state = 213
                self.match(QuerycatParser.T__11)
                self.state = 215
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la - 30)) & ~0x3F) == 0 and (
                    (1 << (_la - 30)) & 106837205023
                ) != 0:
                    self.state = 214
                    self.triplesBlock()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GraphPatternNotTriplesContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optionalGraphPattern(self):
            return self.getTypedRuleContext(
                QuerycatParser.OptionalGraphPatternContext, 0
            )

        def groupOrUnionGraphPattern(self):
            return self.getTypedRuleContext(
                QuerycatParser.GroupOrUnionGraphPatternContext, 0
            )

        def inlineData(self):
            return self.getTypedRuleContext(QuerycatParser.InlineDataContext, 0)

        def getRuleIndex(self):
            return QuerycatParser.RULE_graphPatternNotTriples

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraphPatternNotTriples"):
                listener.enterGraphPatternNotTriples(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraphPatternNotTriples"):
                listener.exitGraphPatternNotTriples(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGraphPatternNotTriples"):
                return visitor.visitGraphPatternNotTriples(self)
            else:
                return visitor.visitChildren(self)

    def graphPatternNotTriples(self):

        localctx = QuerycatParser.GraphPatternNotTriplesContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 30, self.RULE_graphPatternNotTriples)
        try:
            self.state = 222
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13]:
                self.enterOuterAlt(localctx, 1)
                self.state = 219
                self.optionalGraphPattern()
                pass
            elif token in [2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 220
                self.groupOrUnionGraphPattern()
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 3)
                self.state = 221
                self.inlineData()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptionalGraphPatternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupGraphPattern(self):
            return self.getTypedRuleContext(QuerycatParser.GroupGraphPatternContext, 0)

        def getRuleIndex(self):
            return QuerycatParser.RULE_optionalGraphPattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOptionalGraphPattern"):
                listener.enterOptionalGraphPattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOptionalGraphPattern"):
                listener.exitOptionalGraphPattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOptionalGraphPattern"):
                return visitor.visitOptionalGraphPattern(self)
            else:
                return visitor.visitChildren(self)

    def optionalGraphPattern(self):

        localctx = QuerycatParser.OptionalGraphPatternContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 32, self.RULE_optionalGraphPattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 224
            self.match(QuerycatParser.T__12)
            self.state = 225
            self.groupGraphPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GroupOrUnionGraphPatternContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupGraphPattern(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    QuerycatParser.GroupGraphPatternContext
                )
            else:
                return self.getTypedRuleContext(
                    QuerycatParser.GroupGraphPatternContext, i
                )

        def getRuleIndex(self):
            return QuerycatParser.RULE_groupOrUnionGraphPattern

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGroupOrUnionGraphPattern"):
                listener.enterGroupOrUnionGraphPattern(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGroupOrUnionGraphPattern"):
                listener.exitGroupOrUnionGraphPattern(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGroupOrUnionGraphPattern"):
                return visitor.visitGroupOrUnionGraphPattern(self)
            else:
                return visitor.visitChildren(self)

    def groupOrUnionGraphPattern(self):

        localctx = QuerycatParser.GroupOrUnionGraphPatternContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 34, self.RULE_groupOrUnionGraphPattern)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 227
            self.groupGraphPattern()
            self.state = 232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 14 or _la == 15:
                self.state = 228
                _la = self._input.LA(1)
                if not (_la == 14 or _la == 15):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 229
                self.groupGraphPattern()
                self.state = 234
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InlineDataContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataBlock(self):
            return self.getTypedRuleContext(QuerycatParser.DataBlockContext, 0)

        def getRuleIndex(self):
            return QuerycatParser.RULE_inlineData

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInlineData"):
                listener.enterInlineData(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInlineData"):
                listener.exitInlineData(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInlineData"):
                return visitor.visitInlineData(self)
            else:
                return visitor.visitChildren(self)

    def inlineData(self):

        localctx = QuerycatParser.InlineDataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_inlineData)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 235
            self.match(QuerycatParser.T__15)
            self.state = 236
            self.dataBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataBlockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def var_(self):
            return self.getTypedRuleContext(QuerycatParser.Var_Context, 0)

        def dataBlockValue(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(QuerycatParser.DataBlockValueContext)
            else:
                return self.getTypedRuleContext(QuerycatParser.DataBlockValueContext, i)

        def getRuleIndex(self):
            return QuerycatParser.RULE_dataBlock

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDataBlock"):
                listener.enterDataBlock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDataBlock"):
                listener.exitDataBlock(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDataBlock"):
                return visitor.visitDataBlock(self)
            else:
                return visitor.visitChildren(self)

    def dataBlock(self):

        localctx = QuerycatParser.DataBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_dataBlock)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 238
            self.var_()
            self.state = 239
            self.match(QuerycatParser.T__1)
            self.state = 243
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3F) == 0 and ((1 << _la) & 4034125754496188416) != 0:
                self.state = 240
                self.dataBlockValue()
                self.state = 245
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 246
            self.match(QuerycatParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataBlockValueContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numericLiteral(self):
            return self.getTypedRuleContext(QuerycatParser.NumericLiteralContext, 0)

        def booleanLiteral(self):
            return self.getTypedRuleContext(QuerycatParser.BooleanLiteralContext, 0)

        def string_(self):
            return self.getTypedRuleContext(QuerycatParser.String_Context, 0)

        def getRuleIndex(self):
            return QuerycatParser.RULE_dataBlockValue

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDataBlockValue"):
                listener.enterDataBlockValue(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDataBlockValue"):
                listener.exitDataBlockValue(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDataBlockValue"):
                return visitor.visitDataBlockValue(self)
            else:
                return visitor.visitChildren(self)

    def dataBlockValue(self):

        localctx = QuerycatParser.DataBlockValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_dataBlockValue)
        try:
            self.state = 251
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50, 51, 52, 53, 54, 55, 56, 57, 58]:
                self.enterOuterAlt(localctx, 1)
                self.state = 248
                self.numericLiteral()
                pass
            elif token in [43, 44]:
                self.enterOuterAlt(localctx, 2)
                self.state = 249
                self.booleanLiteral()
                pass
            elif token in [60, 61]:
                self.enterOuterAlt(localctx, 3)
                self.state = 250
                self.string_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Filter_Context(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constraint(self):
            return self.getTypedRuleContext(QuerycatParser.ConstraintContext, 0)

        def getRuleIndex(self):
            return QuerycatParser.RULE_filter_

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFilter_"):
                listener.enterFilter_(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFilter_"):
                listener.exitFilter_(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFilter_"):
                return visitor.visitFilter_(self)
            else:
                return visitor.visitChildren(self)

    def filter_(self):

        localctx = QuerycatParser.Filter_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_filter_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 253
            self.match(QuerycatParser.T__16)
            self.state = 254
            self.constraint()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstraintContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def brackettedExpression(self):
            return self.getTypedRuleContext(
                QuerycatParser.BrackettedExpressionContext, 0
            )

        def getRuleIndex(self):
            return QuerycatParser.RULE_constraint

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConstraint"):
                listener.enterConstraint(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConstraint"):
                listener.exitConstraint(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitConstraint"):
                return visitor.visitConstraint(self)
            else:
                return visitor.visitChildren(self)

    def constraint(self):

        localctx = QuerycatParser.ConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_constraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 256
            self.brackettedExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectTriplesContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def triplesSameSubject(self):
            return self.getTypedRuleContext(QuerycatParser.TriplesSameSubjectContext, 0)

        def selectTriples(self):
            return self.getTypedRuleContext(QuerycatParser.SelectTriplesContext, 0)

        def getRuleIndex(self):
            return QuerycatParser.RULE_selectTriples

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSelectTriples"):
                listener.enterSelectTriples(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSelectTriples"):
                listener.exitSelectTriples(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSelectTriples"):
                return visitor.visitSelectTriples(self)
            else:
                return visitor.visitChildren(self)

    def selectTriples(self):

        localctx = QuerycatParser.SelectTriplesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_selectTriples)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 258
            self.triplesSameSubject()
            self.state = 263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 12:
                self.state = 259
                self.match(QuerycatParser.T__11)
                self.state = 261
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la - 30)) & ~0x3F) == 0 and (
                    (1 << (_la - 30)) & 106837205023
                ) != 0:
                    self.state = 260
                    self.selectTriples()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TriplesSameSubjectContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varOrTerm(self):
            return self.getTypedRuleContext(QuerycatParser.VarOrTermContext, 0)

        def propertyListNotEmpty(self):
            return self.getTypedRuleContext(
                QuerycatParser.PropertyListNotEmptyContext, 0
            )

        def getRuleIndex(self):
            return QuerycatParser.RULE_triplesSameSubject

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTriplesSameSubject"):
                listener.enterTriplesSameSubject(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTriplesSameSubject"):
                listener.exitTriplesSameSubject(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTriplesSameSubject"):
                return visitor.visitTriplesSameSubject(self)
            else:
                return visitor.visitChildren(self)

    def triplesSameSubject(self):

        localctx = QuerycatParser.TriplesSameSubjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_triplesSameSubject)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 265
            self.varOrTerm()
            self.state = 266
            self.propertyListNotEmpty()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PropertyListNotEmptyContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def verb(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(QuerycatParser.VerbContext)
            else:
                return self.getTypedRuleContext(QuerycatParser.VerbContext, i)

        def objectList(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(QuerycatParser.ObjectListContext)
            else:
                return self.getTypedRuleContext(QuerycatParser.ObjectListContext, i)

        def getRuleIndex(self):
            return QuerycatParser.RULE_propertyListNotEmpty

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPropertyListNotEmpty"):
                listener.enterPropertyListNotEmpty(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPropertyListNotEmpty"):
                listener.exitPropertyListNotEmpty(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPropertyListNotEmpty"):
                return visitor.visitPropertyListNotEmpty(self)
            else:
                return visitor.visitChildren(self)

    def propertyListNotEmpty(self):

        localctx = QuerycatParser.PropertyListNotEmptyContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 50, self.RULE_propertyListNotEmpty)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 268
            self.verb()
            self.state = 269
            self.objectList()
            self.state = 278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 18:
                self.state = 270
                self.match(QuerycatParser.T__17)
                self.state = 274
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3F) == 0 and ((1 << _la) & 35184539860992) != 0:
                    self.state = 271
                    self.verb()
                    self.state = 272
                    self.objectList()

                self.state = 280
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PropertyListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertyListNotEmpty(self):
            return self.getTypedRuleContext(
                QuerycatParser.PropertyListNotEmptyContext, 0
            )

        def getRuleIndex(self):
            return QuerycatParser.RULE_propertyList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPropertyList"):
                listener.enterPropertyList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPropertyList"):
                listener.exitPropertyList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPropertyList"):
                return visitor.visitPropertyList(self)
            else:
                return visitor.visitChildren(self)

    def propertyList(self):

        localctx = QuerycatParser.PropertyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_propertyList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3F) == 0 and ((1 << _la) & 35184539860992) != 0:
                self.state = 281
                self.propertyListNotEmpty()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ObjectListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def object_(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(QuerycatParser.Object_Context)
            else:
                return self.getTypedRuleContext(QuerycatParser.Object_Context, i)

        def getRuleIndex(self):
            return QuerycatParser.RULE_objectList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterObjectList"):
                listener.enterObjectList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitObjectList"):
                listener.exitObjectList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitObjectList"):
                return visitor.visitObjectList(self)
            else:
                return visitor.visitChildren(self)

    def objectList(self):

        localctx = QuerycatParser.ObjectListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_objectList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 284
            self.object_()
            self.state = 289
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 19:
                self.state = 285
                self.match(QuerycatParser.T__18)
                self.state = 286
                self.object_()
                self.state = 291
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Object_Context(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphNode(self):
            return self.getTypedRuleContext(QuerycatParser.GraphNodeContext, 0)

        def getRuleIndex(self):
            return QuerycatParser.RULE_object_

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterObject_"):
                listener.enterObject_(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitObject_"):
                listener.exitObject_(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitObject_"):
                return visitor.visitObject_(self)
            else:
                return visitor.visitChildren(self)

    def object_(self):

        localctx = QuerycatParser.Object_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_object_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 292
            self.graphNode()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VerbContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def schemaMorphismOrPath(self):
            return self.getTypedRuleContext(
                QuerycatParser.SchemaMorphismOrPathContext, 0
            )

        def getRuleIndex(self):
            return QuerycatParser.RULE_verb

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVerb"):
                listener.enterVerb(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVerb"):
                listener.exitVerb(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitVerb"):
                return visitor.visitVerb(self)
            else:
                return visitor.visitChildren(self)

    def verb(self):

        localctx = QuerycatParser.VerbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_verb)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294
            self.schemaMorphismOrPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SchemaMorphismOrPathContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathAlternative(self):
            return self.getTypedRuleContext(QuerycatParser.PathAlternativeContext, 0)

        def getRuleIndex(self):
            return QuerycatParser.RULE_schemaMorphismOrPath

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSchemaMorphismOrPath"):
                listener.enterSchemaMorphismOrPath(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSchemaMorphismOrPath"):
                listener.exitSchemaMorphismOrPath(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSchemaMorphismOrPath"):
                return visitor.visitSchemaMorphismOrPath(self)
            else:
                return visitor.visitChildren(self)

    def schemaMorphismOrPath(self):

        localctx = QuerycatParser.SchemaMorphismOrPathContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 60, self.RULE_schemaMorphismOrPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296
            self.pathAlternative()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PathAlternativeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathSequence(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(QuerycatParser.PathSequenceContext)
            else:
                return self.getTypedRuleContext(QuerycatParser.PathSequenceContext, i)

        def getRuleIndex(self):
            return QuerycatParser.RULE_pathAlternative

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPathAlternative"):
                listener.enterPathAlternative(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPathAlternative"):
                listener.exitPathAlternative(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPathAlternative"):
                return visitor.visitPathAlternative(self)
            else:
                return visitor.visitChildren(self)

    def pathAlternative(self):

        localctx = QuerycatParser.PathAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_pathAlternative)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 298
            self.pathSequence()
            self.state = 303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 20:
                self.state = 299
                self.match(QuerycatParser.T__19)
                self.state = 300
                self.pathSequence()
                self.state = 305
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PathSequenceContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathWithMod(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(QuerycatParser.PathWithModContext)
            else:
                return self.getTypedRuleContext(QuerycatParser.PathWithModContext, i)

        def getRuleIndex(self):
            return QuerycatParser.RULE_pathSequence

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPathSequence"):
                listener.enterPathSequence(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPathSequence"):
                listener.exitPathSequence(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPathSequence"):
                return visitor.visitPathSequence(self)
            else:
                return visitor.visitChildren(self)

    def pathSequence(self):

        localctx = QuerycatParser.PathSequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_pathSequence)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 306
            self.pathWithMod()
            self.state = 311
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 21:
                self.state = 307
                self.match(QuerycatParser.T__20)
                self.state = 308
                self.pathWithMod()
                self.state = 313
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PathWithModContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pathPrimary(self):
            return self.getTypedRuleContext(QuerycatParser.PathPrimaryContext, 0)

        def pathMod(self):
            return self.getTypedRuleContext(QuerycatParser.PathModContext, 0)

        def getRuleIndex(self):
            return QuerycatParser.RULE_pathWithMod

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPathWithMod"):
                listener.enterPathWithMod(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPathWithMod"):
                listener.exitPathWithMod(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPathWithMod"):
                return visitor.visitPathWithMod(self)
            else:
                return visitor.visitChildren(self)

    def pathWithMod(self):

        localctx = QuerycatParser.PathWithModContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_pathWithMod)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            self.pathPrimary()
            self.state = 316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3F) == 0 and ((1 << _la) & 29360128) != 0:
                self.state = 315
                self.pathMod()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PathModContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return QuerycatParser.RULE_pathMod

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPathMod"):
                listener.enterPathMod(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPathMod"):
                listener.exitPathMod(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPathMod"):
                return visitor.visitPathMod(self)
            else:
                return visitor.visitChildren(self)

    def pathMod(self):

        localctx = QuerycatParser.PathModContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_pathMod)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 318
            _la = self._input.LA(1)
            if not (((_la) & ~0x3F) == 0 and ((1 << _la) & 29360128) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PathPrimaryContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def schemaMorphism(self):
            return self.getTypedRuleContext(QuerycatParser.SchemaMorphismContext, 0)

        def schemaMorphismOrPath(self):
            return self.getTypedRuleContext(
                QuerycatParser.SchemaMorphismOrPathContext, 0
            )

        def getRuleIndex(self):
            return QuerycatParser.RULE_pathPrimary

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPathPrimary"):
                listener.enterPathPrimary(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPathPrimary"):
                listener.exitPathPrimary(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPathPrimary"):
                return visitor.visitPathPrimary(self)
            else:
                return visitor.visitChildren(self)

    def pathPrimary(self):

        localctx = QuerycatParser.PathPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_pathPrimary)
        try:
            self.state = 325
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27, 45]:
                self.enterOuterAlt(localctx, 1)
                self.state = 320
                self.schemaMorphism()
                pass
            elif token in [25]:
                self.enterOuterAlt(localctx, 2)
                self.state = 321
                self.match(QuerycatParser.T__24)
                self.state = 322
                self.schemaMorphismOrPath()
                self.state = 323
                self.match(QuerycatParser.T__25)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SchemaMorphismContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryMorphism(self):
            return self.getTypedRuleContext(QuerycatParser.PrimaryMorphismContext, 0)

        def dualMorphism(self):
            return self.getTypedRuleContext(QuerycatParser.DualMorphismContext, 0)

        def getRuleIndex(self):
            return QuerycatParser.RULE_schemaMorphism

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSchemaMorphism"):
                listener.enterSchemaMorphism(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSchemaMorphism"):
                listener.exitSchemaMorphism(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSchemaMorphism"):
                return visitor.visitSchemaMorphism(self)
            else:
                return visitor.visitChildren(self)

    def schemaMorphism(self):

        localctx = QuerycatParser.SchemaMorphismContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_schemaMorphism)
        try:
            self.state = 329
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [45]:
                self.enterOuterAlt(localctx, 1)
                self.state = 327
                self.primaryMorphism()
                pass
            elif token in [27]:
                self.enterOuterAlt(localctx, 2)
                self.state = 328
                self.dualMorphism()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimaryMorphismContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCHEMA_MORPHISM(self):
            return self.getToken(QuerycatParser.SCHEMA_MORPHISM, 0)

        def getRuleIndex(self):
            return QuerycatParser.RULE_primaryMorphism

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPrimaryMorphism"):
                listener.enterPrimaryMorphism(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPrimaryMorphism"):
                listener.exitPrimaryMorphism(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPrimaryMorphism"):
                return visitor.visitPrimaryMorphism(self)
            else:
                return visitor.visitChildren(self)

    def primaryMorphism(self):

        localctx = QuerycatParser.PrimaryMorphismContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_primaryMorphism)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 331
            self.match(QuerycatParser.SCHEMA_MORPHISM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DualMorphismContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryMorphism(self):
            return self.getTypedRuleContext(QuerycatParser.PrimaryMorphismContext, 0)

        def getRuleIndex(self):
            return QuerycatParser.RULE_dualMorphism

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDualMorphism"):
                listener.enterDualMorphism(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDualMorphism"):
                listener.exitDualMorphism(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDualMorphism"):
                return visitor.visitDualMorphism(self)
            else:
                return visitor.visitChildren(self)

    def dualMorphism(self):

        localctx = QuerycatParser.DualMorphismContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_dualMorphism)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 333
            self.match(QuerycatParser.T__26)
            self.state = 334
            self.primaryMorphism()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GraphNodeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varOrTerm(self):
            return self.getTypedRuleContext(QuerycatParser.VarOrTermContext, 0)

        def var_(self):
            return self.getTypedRuleContext(QuerycatParser.Var_Context, 0)

        def getRuleIndex(self):
            return QuerycatParser.RULE_graphNode

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGraphNode"):
                listener.enterGraphNode(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGraphNode"):
                listener.exitGraphNode(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGraphNode"):
                return visitor.visitGraphNode(self)
            else:
                return visitor.visitChildren(self)

    def graphNode(self):

        localctx = QuerycatParser.GraphNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_graphNode)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            self.varOrTerm()
            self.state = 339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 28:
                self.state = 337
                self.match(QuerycatParser.T__27)
                self.state = 338
                self.var_()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarOrTermContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def var_(self):
            return self.getTypedRuleContext(QuerycatParser.Var_Context, 0)

        def constantTerm(self):
            return self.getTypedRuleContext(QuerycatParser.ConstantTermContext, 0)

        def aggregationTerm(self):
            return self.getTypedRuleContext(QuerycatParser.AggregationTermContext, 0)

        def getRuleIndex(self):
            return QuerycatParser.RULE_varOrTerm

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVarOrTerm"):
                listener.enterVarOrTerm(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVarOrTerm"):
                listener.exitVarOrTerm(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitVarOrTerm"):
                return visitor.visitVarOrTerm(self)
            else:
                return visitor.visitChildren(self)

    def varOrTerm(self):

        localctx = QuerycatParser.VarOrTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_varOrTerm)
        try:
            self.state = 344
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48, 49]:
                self.enterOuterAlt(localctx, 1)
                self.state = 341
                self.var_()
                pass
            elif token in [
                43,
                44,
                47,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                60,
                61,
                65,
                66,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 342
                self.constantTerm()
                pass
            elif token in [30, 31, 32, 33, 34]:
                self.enterOuterAlt(localctx, 3)
                self.state = 343
                self.aggregationTerm()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Var_Context(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR1(self):
            return self.getToken(QuerycatParser.VAR1, 0)

        def VAR2(self):
            return self.getToken(QuerycatParser.VAR2, 0)

        def getRuleIndex(self):
            return QuerycatParser.RULE_var_

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVar_"):
                listener.enterVar_(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVar_"):
                listener.exitVar_(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitVar_"):
                return visitor.visitVar_(self)
            else:
                return visitor.visitChildren(self)

    def var_(self):

        localctx = QuerycatParser.Var_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_var_)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 346
            _la = self._input.LA(1)
            if not (_la == 48 or _la == 49):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantTermContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numericLiteral(self):
            return self.getTypedRuleContext(QuerycatParser.NumericLiteralContext, 0)

        def booleanLiteral(self):
            return self.getTypedRuleContext(QuerycatParser.BooleanLiteralContext, 0)

        def string_(self):
            return self.getTypedRuleContext(QuerycatParser.String_Context, 0)

        def blankNode(self):
            return self.getTypedRuleContext(QuerycatParser.BlankNodeContext, 0)

        def NIL(self):
            return self.getToken(QuerycatParser.NIL, 0)

        def getRuleIndex(self):
            return QuerycatParser.RULE_constantTerm

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConstantTerm"):
                listener.enterConstantTerm(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConstantTerm"):
                listener.exitConstantTerm(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitConstantTerm"):
                return visitor.visitConstantTerm(self)
            else:
                return visitor.visitChildren(self)

    def constantTerm(self):

        localctx = QuerycatParser.ConstantTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_constantTerm)
        try:
            self.state = 353
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50, 51, 52, 53, 54, 55, 56, 57, 58]:
                self.enterOuterAlt(localctx, 1)
                self.state = 348
                self.numericLiteral()
                pass
            elif token in [43, 44]:
                self.enterOuterAlt(localctx, 2)
                self.state = 349
                self.booleanLiteral()
                pass
            elif token in [60, 61]:
                self.enterOuterAlt(localctx, 3)
                self.state = 350
                self.string_()
                pass
            elif token in [47, 66]:
                self.enterOuterAlt(localctx, 4)
                self.state = 351
                self.blankNode()
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 5)
                self.state = 352
                self.match(QuerycatParser.NIL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AggregationTermContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregationFunc(self):
            return self.getTypedRuleContext(QuerycatParser.AggregationFuncContext, 0)

        def var_(self):
            return self.getTypedRuleContext(QuerycatParser.Var_Context, 0)

        def distinctModifier(self):
            return self.getTypedRuleContext(QuerycatParser.DistinctModifierContext, 0)

        def getRuleIndex(self):
            return QuerycatParser.RULE_aggregationTerm

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAggregationTerm"):
                listener.enterAggregationTerm(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAggregationTerm"):
                listener.exitAggregationTerm(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAggregationTerm"):
                return visitor.visitAggregationTerm(self)
            else:
                return visitor.visitChildren(self)

    def aggregationTerm(self):

        localctx = QuerycatParser.AggregationTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_aggregationTerm)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 355
            self.aggregationFunc()
            self.state = 356
            self.match(QuerycatParser.T__24)
            self.state = 358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 29:
                self.state = 357
                self.distinctModifier()

            self.state = 360
            self.var_()
            self.state = 361
            self.match(QuerycatParser.T__25)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DistinctModifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return QuerycatParser.RULE_distinctModifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDistinctModifier"):
                listener.enterDistinctModifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDistinctModifier"):
                listener.exitDistinctModifier(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDistinctModifier"):
                return visitor.visitDistinctModifier(self)
            else:
                return visitor.visitChildren(self)

    def distinctModifier(self):

        localctx = QuerycatParser.DistinctModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_distinctModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            self.match(QuerycatParser.T__28)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AggregationFuncContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return QuerycatParser.RULE_aggregationFunc

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAggregationFunc"):
                listener.enterAggregationFunc(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAggregationFunc"):
                listener.exitAggregationFunc(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAggregationFunc"):
                return visitor.visitAggregationFunc(self)
            else:
                return visitor.visitChildren(self)

    def aggregationFunc(self):

        localctx = QuerycatParser.AggregationFuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_aggregationFunc)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 365
            _la = self._input.LA(1)
            if not (((_la) & ~0x3F) == 0 and ((1 << _la) & 33285996544) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalOrExpression(self):
            return self.getTypedRuleContext(
                QuerycatParser.ConditionalOrExpressionContext, 0
            )

        def getRuleIndex(self):
            return QuerycatParser.RULE_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpression"):
                listener.enterExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpression"):
                listener.exitExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExpression"):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)

    def expression(self):

        localctx = QuerycatParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 367
            self.conditionalOrExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionalOrExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalAndExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    QuerycatParser.ConditionalAndExpressionContext
                )
            else:
                return self.getTypedRuleContext(
                    QuerycatParser.ConditionalAndExpressionContext, i
                )

        def getRuleIndex(self):
            return QuerycatParser.RULE_conditionalOrExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConditionalOrExpression"):
                listener.enterConditionalOrExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConditionalOrExpression"):
                listener.exitConditionalOrExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitConditionalOrExpression"):
                return visitor.visitConditionalOrExpression(self)
            else:
                return visitor.visitChildren(self)

    def conditionalOrExpression(self):

        localctx = QuerycatParser.ConditionalOrExpressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 94, self.RULE_conditionalOrExpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self.conditionalAndExpression()
            self.state = 374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 35:
                self.state = 370
                self.match(QuerycatParser.T__34)
                self.state = 371
                self.conditionalAndExpression()
                self.state = 376
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionalAndExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueLogical(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(QuerycatParser.ValueLogicalContext)
            else:
                return self.getTypedRuleContext(QuerycatParser.ValueLogicalContext, i)

        def getRuleIndex(self):
            return QuerycatParser.RULE_conditionalAndExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConditionalAndExpression"):
                listener.enterConditionalAndExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConditionalAndExpression"):
                listener.exitConditionalAndExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitConditionalAndExpression"):
                return visitor.visitConditionalAndExpression(self)
            else:
                return visitor.visitChildren(self)

    def conditionalAndExpression(self):

        localctx = QuerycatParser.ConditionalAndExpressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 96, self.RULE_conditionalAndExpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 377
            self.valueLogical()
            self.state = 382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 36:
                self.state = 378
                self.match(QuerycatParser.T__35)
                self.state = 379
                self.valueLogical()
                self.state = 384
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValueLogicalContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalExpression(self):
            return self.getTypedRuleContext(
                QuerycatParser.RelationalExpressionContext, 0
            )

        def getRuleIndex(self):
            return QuerycatParser.RULE_valueLogical

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterValueLogical"):
                listener.enterValueLogical(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitValueLogical"):
                listener.exitValueLogical(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitValueLogical"):
                return visitor.visitValueLogical(self)
            else:
                return visitor.visitChildren(self)

    def valueLogical(self):

        localctx = QuerycatParser.ValueLogicalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_valueLogical)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 385
            self.relationalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RelationalExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionPart(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(QuerycatParser.ExpressionPartContext)
            else:
                return self.getTypedRuleContext(QuerycatParser.ExpressionPartContext, i)

        def getRuleIndex(self):
            return QuerycatParser.RULE_relationalExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRelationalExpression"):
                listener.enterRelationalExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRelationalExpression"):
                listener.exitRelationalExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRelationalExpression"):
                return visitor.visitRelationalExpression(self)
            else:
                return visitor.visitChildren(self)

    def relationalExpression(self):

        localctx = QuerycatParser.RelationalExpressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 100, self.RULE_relationalExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 387
            self.expressionPart()
            self.state = 400
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [37]:
                self.state = 388
                self.match(QuerycatParser.T__36)
                self.state = 389
                self.expressionPart()
                pass
            elif token in [38]:
                self.state = 390
                self.match(QuerycatParser.T__37)
                self.state = 391
                self.expressionPart()
                pass
            elif token in [39]:
                self.state = 392
                self.match(QuerycatParser.T__38)
                self.state = 393
                self.expressionPart()
                pass
            elif token in [40]:
                self.state = 394
                self.match(QuerycatParser.T__39)
                self.state = 395
                self.expressionPart()
                pass
            elif token in [41]:
                self.state = 396
                self.match(QuerycatParser.T__40)
                self.state = 397
                self.expressionPart()
                pass
            elif token in [42]:
                self.state = 398
                self.match(QuerycatParser.T__41)
                self.state = 399
                self.expressionPart()
                pass
            elif token in [26, 35, 36]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionPartContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(QuerycatParser.PrimaryExpressionContext, 0)

        def getRuleIndex(self):
            return QuerycatParser.RULE_expressionPart

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpressionPart"):
                listener.enterExpressionPart(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpressionPart"):
                listener.exitExpressionPart(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExpressionPart"):
                return visitor.visitExpressionPart(self)
            else:
                return visitor.visitChildren(self)

    def expressionPart(self):

        localctx = QuerycatParser.ExpressionPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_expressionPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 402
            self.primaryExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def brackettedExpression(self):
            return self.getTypedRuleContext(
                QuerycatParser.BrackettedExpressionContext, 0
            )

        def numericLiteral(self):
            return self.getTypedRuleContext(QuerycatParser.NumericLiteralContext, 0)

        def booleanLiteral(self):
            return self.getTypedRuleContext(QuerycatParser.BooleanLiteralContext, 0)

        def string_(self):
            return self.getTypedRuleContext(QuerycatParser.String_Context, 0)

        def varOrTerm(self):
            return self.getTypedRuleContext(QuerycatParser.VarOrTermContext, 0)

        def getRuleIndex(self):
            return QuerycatParser.RULE_primaryExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPrimaryExpression"):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPrimaryExpression"):
                listener.exitPrimaryExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPrimaryExpression"):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)

    def primaryExpression(self):

        localctx = QuerycatParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_primaryExpression)
        try:
            self.state = 409
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 41, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 404
                self.brackettedExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 405
                self.numericLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 406
                self.booleanLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 407
                self.string_()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 408
                self.varOrTerm()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BrackettedExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(QuerycatParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return QuerycatParser.RULE_brackettedExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBrackettedExpression"):
                listener.enterBrackettedExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBrackettedExpression"):
                listener.exitBrackettedExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBrackettedExpression"):
                return visitor.visitBrackettedExpression(self)
            else:
                return visitor.visitChildren(self)

    def brackettedExpression(self):

        localctx = QuerycatParser.BrackettedExpressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 106, self.RULE_brackettedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 411
            self.match(QuerycatParser.T__24)
            self.state = 412
            self.expression()
            self.state = 413
            self.match(QuerycatParser.T__25)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumericLiteralContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numericLiteralUnsigned(self):
            return self.getTypedRuleContext(
                QuerycatParser.NumericLiteralUnsignedContext, 0
            )

        def numericLiteralPositive(self):
            return self.getTypedRuleContext(
                QuerycatParser.NumericLiteralPositiveContext, 0
            )

        def numericLiteralNegative(self):
            return self.getTypedRuleContext(
                QuerycatParser.NumericLiteralNegativeContext, 0
            )

        def getRuleIndex(self):
            return QuerycatParser.RULE_numericLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNumericLiteral"):
                listener.enterNumericLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNumericLiteral"):
                listener.exitNumericLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNumericLiteral"):
                return visitor.visitNumericLiteral(self)
            else:
                return visitor.visitChildren(self)

    def numericLiteral(self):

        localctx = QuerycatParser.NumericLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_numericLiteral)
        try:
            self.state = 418
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50, 51, 52]:
                self.enterOuterAlt(localctx, 1)
                self.state = 415
                self.numericLiteralUnsigned()
                pass
            elif token in [53, 54, 55]:
                self.enterOuterAlt(localctx, 2)
                self.state = 416
                self.numericLiteralPositive()
                pass
            elif token in [56, 57, 58]:
                self.enterOuterAlt(localctx, 3)
                self.state = 417
                self.numericLiteralNegative()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumericLiteralUnsignedContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER(self):
            return self.getToken(QuerycatParser.INTEGER, 0)

        def DECIMAL(self):
            return self.getToken(QuerycatParser.DECIMAL, 0)

        def DOUBLE(self):
            return self.getToken(QuerycatParser.DOUBLE, 0)

        def getRuleIndex(self):
            return QuerycatParser.RULE_numericLiteralUnsigned

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNumericLiteralUnsigned"):
                listener.enterNumericLiteralUnsigned(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNumericLiteralUnsigned"):
                listener.exitNumericLiteralUnsigned(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNumericLiteralUnsigned"):
                return visitor.visitNumericLiteralUnsigned(self)
            else:
                return visitor.visitChildren(self)

    def numericLiteralUnsigned(self):

        localctx = QuerycatParser.NumericLiteralUnsignedContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 110, self.RULE_numericLiteralUnsigned)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 420
            _la = self._input.LA(1)
            if not (((_la) & ~0x3F) == 0 and ((1 << _la) & 7881299347898368) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumericLiteralPositiveContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_POSITIVE(self):
            return self.getToken(QuerycatParser.INTEGER_POSITIVE, 0)

        def DECIMAL_POSITIVE(self):
            return self.getToken(QuerycatParser.DECIMAL_POSITIVE, 0)

        def DOUBLE_POSITIVE(self):
            return self.getToken(QuerycatParser.DOUBLE_POSITIVE, 0)

        def getRuleIndex(self):
            return QuerycatParser.RULE_numericLiteralPositive

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNumericLiteralPositive"):
                listener.enterNumericLiteralPositive(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNumericLiteralPositive"):
                listener.exitNumericLiteralPositive(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNumericLiteralPositive"):
                return visitor.visitNumericLiteralPositive(self)
            else:
                return visitor.visitChildren(self)

    def numericLiteralPositive(self):

        localctx = QuerycatParser.NumericLiteralPositiveContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 112, self.RULE_numericLiteralPositive)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422
            _la = self._input.LA(1)
            if not (((_la) & ~0x3F) == 0 and ((1 << _la) & 63050394783186944) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumericLiteralNegativeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_NEGATIVE(self):
            return self.getToken(QuerycatParser.INTEGER_NEGATIVE, 0)

        def DECIMAL_NEGATIVE(self):
            return self.getToken(QuerycatParser.DECIMAL_NEGATIVE, 0)

        def DOUBLE_NEGATIVE(self):
            return self.getToken(QuerycatParser.DOUBLE_NEGATIVE, 0)

        def getRuleIndex(self):
            return QuerycatParser.RULE_numericLiteralNegative

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNumericLiteralNegative"):
                listener.enterNumericLiteralNegative(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNumericLiteralNegative"):
                listener.exitNumericLiteralNegative(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNumericLiteralNegative"):
                return visitor.visitNumericLiteralNegative(self)
            else:
                return visitor.visitChildren(self)

    def numericLiteralNegative(self):

        localctx = QuerycatParser.NumericLiteralNegativeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 114, self.RULE_numericLiteralNegative)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 424
            _la = self._input.LA(1)
            if not (((_la) & ~0x3F) == 0 and ((1 << _la) & 504403158265495552) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BooleanLiteralContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return QuerycatParser.RULE_booleanLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBooleanLiteral"):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBooleanLiteral"):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBooleanLiteral"):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)

    def booleanLiteral(self):

        localctx = QuerycatParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_booleanLiteral)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 426
            _la = self._input.LA(1)
            if not (_la == 43 or _la == 44):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class String_Context(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL1(self):
            return self.getToken(QuerycatParser.STRING_LITERAL1, 0)

        def STRING_LITERAL2(self):
            return self.getToken(QuerycatParser.STRING_LITERAL2, 0)

        def getRuleIndex(self):
            return QuerycatParser.RULE_string_

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterString_"):
                listener.enterString_(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitString_"):
                listener.exitString_(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitString_"):
                return visitor.visitString_(self)
            else:
                return visitor.visitChildren(self)

    def string_(self):

        localctx = QuerycatParser.String_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_string_)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 428
            _la = self._input.LA(1)
            if not (_la == 60 or _la == 61):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlankNodeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BLANK_NODE_LABEL(self):
            return self.getToken(QuerycatParser.BLANK_NODE_LABEL, 0)

        def ANON(self):
            return self.getToken(QuerycatParser.ANON, 0)

        def getRuleIndex(self):
            return QuerycatParser.RULE_blankNode

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBlankNode"):
                listener.enterBlankNode(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBlankNode"):
                listener.exitBlankNode(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBlankNode"):
                return visitor.visitBlankNode(self)
            else:
                return visitor.visitChildren(self)

    def blankNode(self):

        localctx = QuerycatParser.BlankNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_blankNode)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 430
            _la = self._input.LA(1)
            if not (_la == 47 or _la == 66):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx
